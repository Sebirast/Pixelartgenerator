import { aSlider, pixelSizeSlider } from "./script.js";

// let processingTypes = {
//     median, 
//     average, 
//     middlePixel, 
//     range
// };

export class Pixel {
    constructor(r, g, b, a, index) {
        this.red = r;
        this.green = g;
        this.blue = b;
        this.alpha = a;
        this.index = index;
    }

    /**
     * @returns the pixeldata
     */
    getData() {
        return {
            red: this.red,
            green: this.green, 
            blue: this.blue,
            alpha: this.alpha,
        };
    }

    getIndex() {
        return {
            index: this.index
        };
    }

    /**
     * @param {*} data imagedata.data => rgba array generated by canvasContext.getImageData(x, y, a, b)
     * @returns an array consisting of pixelobjects
     */
    static toPixelArray(data) {
        let array = []; 
        for(let i = 0; i < data.length; i += 4) {
            let p = new Pixel(
                data[i],
                data[i + 1],
                data[i + 2],
                data[i + 3], 
                0
            )
            array.push(p);
        }

        for(let o = 0; o < array.length; o++) {
            array[o].index = o;
        }

        console.log(array);

        return array;
    }
    
    static toImageData(pixelArray, imageData) {
        for(let i = 0; i < pixelArray.length; i += 4) {
            imageData[i] = pixelArray[i];
            imageData[i + 1] = pixelArray[i + 1];
            imageData[i + 2] = pixelArray[i + 2];
            imageData[i + 3] = pixelArray[i + 3];
        }
    }
}

export class Chunk {
    constructor(pixelArray) {
        this.pixelArray = pixelArray;
        this.sideLength = Math.sqrt(pixelArray.length);

        if(this.sideLength % 2 == 1) {
            this.middlePixel = Math.ceil(Math.pow(Math.sqrt(pixelArray.length), 2)/2) - 1;
        }
        else {
            // TODO think of a solution for even sidelenghts
        }
    }   

    static fillChunkWithData(indexOfChunk, sideLength, pixelArray, width, height) {
        let array = [];
        let indexOfFirstPixel = indexOfChunk * sideLength + sideLength * height * width; // TODO is that really right

        for(let i = 0; i < sideLength; i++) { // for rows
            for(let o = 0; o < sideLength; o++) { 
                array.push(pixelArray[indexOfFirstPixel + (width * i) + o]);
            }
        }

        return new Chunk(array);
    }

    addChunkToImageData(imageData) {
        let data = imageData.data;

        this.pixelArray.forEach(pixel => {
            data[pixel.getData().index * 4] = 0;
            data[pixel.getData().index * 4 + 1] = 0;
            data[pixel.getData().index * 4 + 2] = 0;
        });

        return imageData;
    }

    getMiddlePixel() {
        return this.pixelArray[this.middlePixel];
    }

    fillChunkWithColor(pixel) {
        return;
    }
}

export class Processor {
    constructor(chunkArray) {

    }

    static imageToChunkArray(imageData) {
        let data = imageData.data;
        let pixelArray = Pixel.toPixelArray(data);

    }
}