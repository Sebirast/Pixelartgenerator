
export class Pixel {
    constructor(r, g, b, a, index) {
        this.red = r;
        this.green = g;
        this.blue = b;
        this.alpha = a;
        this.index = index;
    }

    /**
     * @returns the pixeldata
     */
    getData() {
        return {
            red: this.red,
            green: this.green, 
            blue: this.blue,
            alpha: this.alpha,
        };
    }

    getIndex() {
        return {
            index: this.index
        };
    }

    /**
     * @param {*} data imagedata.data => rgba array generated by canvasContext.getImageData(x, y, a, b)
     * @returns an array consisting of pixelobjects
     */
    static toPixelArray(data) {
        let array = []; 
        for(let i = 0; i < data.length; i += 4) {
            let p = new Pixel(
                data[i],
                data[i + 1],
                data[i + 2],
                data[i + 3], 
                0
            )
            array.push(p);
        }

        for(let o = 0; o < array.length; o++) {
            array[o].index = o;
        }

        return array;
    }
}

export class Chunk {
    constructor(pixelArray) {
        this.pixelArray = pixelArray;
        this.sideLength = Math.sqrt(pixelArray.length);

        if(this.sideLength % 2 == 1) {
            this.middlePixel = Math.ceil(Math.pow(Math.sqrt(pixelArray.length), 2)/2) - 1;
        }
        else {
            // TODO think of a solution for even sidelenghts
            this.middlePixel = Math.ceil(Math.pow(Math.sqrt(pixelArray.length), 2)/2) - 1;
        }
    }   

    static fillChunkWithData(indexOfChunk, sideLength, pixelArray, width, height) {
        let array = [];
        let indexOfFirstPixel = indexOfChunk * sideLength + sideLength * height * width; // TODO is that really right

        for(let i = 0; i < sideLength; i++) { // for rows
            for(let o = 0; o < sideLength; o++) { 
                array.push(pixelArray[indexOfFirstPixel + (width * i) + o]);
            }
        }

        return new Chunk(array);
    }

    addChunkToImageData(imageData) {
        let data = imageData.data;

        this.pixelArray.forEach(pixel => {
            data[pixel.getIndex().index * 4] = pixel.red;
            data[pixel.getIndex().index * 4 + 1] = pixel.green;
            data[pixel.getIndex().index * 4 + 2] = pixel.blue;
        });

        return imageData;
    }

    getMiddlePixel() {
        return this.pixelArray[this.middlePixel];
    }

    fillChunkWithColor(pixel) {
        this.pixelArray.forEach(element => {
            element.red = pixel.red;
            element.green = pixel.green;
            element.blue = pixel.blue;
        });
    }
}

export class Processor {
    constructor(chunkArray) {
        this.chunkArray = chunkArray;
    }

    static imageToChunkArray(imageData, sideLength) {
        let data = imageData.data;

        let width = imageData.width;
        let height = imageData.height;

        let pixelArray = Pixel.toPixelArray(data);

        let quantityOfChunksHorizontal = Math.floor(width / sideLength);
        let quantityOfChunksVertical = Math.floor(height / sideLength);

        let chunkArray = [];

        for(let i = 0; i < quantityOfChunksVertical; i++) {
            for(let o = 0; o < quantityOfChunksHorizontal; o++) {
                chunkArray.push(Chunk.fillChunkWithData(o, sideLength, pixelArray, imageData.width, i));
            }
        }

        return new Processor(chunkArray);
    }

    fillChunksWithColors() {
        this.chunkArray.forEach(chunk => {
            chunk.fillChunkWithColor(chunk.getMiddlePixel());
        });

    }

    addChunksToImageData(imageData, canvasContext, originalImageData) {
        this.chunkArray.forEach(chunk => {
            chunk.addChunkToImageData(imageData);
        });

        canvasContext.putImageData(imageData, 0, 0);
    }
}

export class ImageDataStorage {
    constructor(imageData) {
        this.imageData = imageData;
        this.formerData = imageData;
    }

    getImageData() {
        return this.imageData;
    }

    setImageData(imageData) {
        this.imageData.forEach(value => {

        });
        this.imageData = imageData;
    }
}